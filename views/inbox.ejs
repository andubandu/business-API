<!DOCTYPE html>
<html>
<head>
    <title>Inbox Widget</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: transparent;
            color: #333;
            overflow: hidden;
        }

        .inbox-dropdown {
            width: 400px;
            max-height: 500px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            border: 1px solid #e1e5e9;
            overflow: hidden;
            position: relative;
        }

        .inbox-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 16px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .inbox-title {
            font-size: 18px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .notification-badge {
            background: #ff4757;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 11px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            min-width: 20px;
        }

        .header-actions {
            display: flex;
            gap: 8px;
        }

        .btn-icon {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            width: 32px;
            height: 32px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            font-size: 14px;
        }

        .btn-icon:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .inbox-stats {
            display: flex;
            padding: 12px 20px;
            gap: 16px;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
        }

        .stat-item {
            flex: 1;
            text-align: center;
        }

        .stat-number {
            font-size: 20px;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 2px;
        }

        .stat-label {
            font-size: 11px;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .notification-list {
            max-height: 350px;
            overflow-y: auto;
        }

        .notification-item {
            padding: 16px 20px;
            border-bottom: 1px solid #f0f0f0;
            display: flex;
            align-items: flex-start;
            gap: 12px;
            transition: all 0.2s;
            position: relative;
            cursor: pointer;
        }

        .notification-item:hover {
            background: #f8f9fa;
        }

        .notification-item.unread {
            background: linear-gradient(90deg, #fff3cd 0%, #ffffff 100%);
            border-left: 3px solid #ffc107;
        }

        .notification-item.unread::before {
            content: '';
            position: absolute;
            left: 8px;
            top: 20px;
            width: 6px;
            height: 6px;
            background: #ffc107;
            border-radius: 50%;
        }

        .notification-icon {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            flex-shrink: 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .notification-icon.purchase { background: linear-gradient(135deg, #4CAF50, #45a049); color: white; }
        .notification-icon.payout_sent { background: linear-gradient(135deg, #2196F3, #1976D2); color: white; }
        .notification-icon.payout_failed { background: linear-gradient(135deg, #f44336, #d32f2f); color: white; }
        .notification-icon.verification_approved { background: linear-gradient(135deg, #00BCD4, #0097A7); color: white; }
        .notification-icon.verification_rejected { background: linear-gradient(135deg, #FF5722, #E64A19); color: white; }
        .notification-icon.system { background: linear-gradient(135deg, #9E9E9E, #757575); color: white; }

        .notification-content {
            flex: 1;
            min-width: 0;
        }

        .notification-title {
            font-weight: 600;
            margin-bottom: 4px;
            color: #333;
            font-size: 14px;
            line-height: 1.3;
        }

        .notification-message {
            color: #666;
            font-size: 13px;
            line-height: 1.4;
            margin-bottom: 8px;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .buyer-info {
            background: linear-gradient(135deg, #e3f2fd, #f8f9fa);
            padding: 8px 10px;
            border-radius: 6px;
            margin: 6px 0;
            border-left: 2px solid #2196F3;
            font-size: 12px;
        }

        .buyer-info strong {
            color: #1976D2;
        }

        .amount-highlight {
            color: #4CAF50;
            font-weight: bold;
        }

        .notification-time {
            font-size: 11px;
            color: #999;
            margin-top: 4px;
        }

        .notification-actions {
            position: absolute;
            top: 12px;
            right: 16px;
            display: flex;
            gap: 4px;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .notification-item:hover .notification-actions {
            opacity: 1;
        }

        .btn-tiny {
            padding: 2px 6px;
            font-size: 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s;
            text-transform: uppercase;
            letter-spacing: 0.3px;
            font-weight: 500;
        }

        .btn-read {
            background: #4CAF50;
            color: white;
        }

        .btn-delete {
            background: #f44336;
            color: white;
        }

        .btn-read:hover { background: #45a049; }
        .btn-delete:hover { background: #d32f2f; }

        .empty-inbox {
            text-align: center;
            padding: 40px 20px;
            color: #666;
        }

        .empty-inbox .icon {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .empty-inbox h3 {
            margin-bottom: 8px;
            color: #999;
            font-weight: 400;
            font-size: 16px;
        }

        .empty-inbox p {
            font-size: 13px;
            line-height: 1.4;
        }

        .login-required {
            text-align: center;
            padding: 40px 20px;
            color: #666;
        }

        .login-required h3 {
            color: #f44336;
            margin-bottom: 16px;
            font-weight: 400;
        }

        .connection-indicator {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            transition: all 0.3s;
        }

        .connection-indicator.connected {
            background: #4CAF50;
        }

        .connection-indicator.disconnected {
            background: #f44336;
        }

        @keyframes slideIn {
            from {
                transform: translateY(-10px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .notification-item.new {
            animation: slideIn 0.3s ease-out;
        }

        .loading {
            text-align: center;
            padding: 30px;
            color: #666;
            font-size: 14px;
        }

        .loading::after {
            content: '';
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Custom scrollbar */
        .notification-list::-webkit-scrollbar {
            width: 4px;
        }

        .notification-list::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .notification-list::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 2px;
        }

        .notification-list::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
    </style>
</head>
<body>
    <div class="inbox-dropdown">
        <div class="connection-indicator" id="connectionIndicator"></div>
        
        <div id="login-check" class="login-required" style="display: none;">
            <h3>🔒 Login Required</h3>
            <p>Please log in to view notifications.</p>
        </div>

        <div id="inbox-content">
            <div class="inbox-header">
                <div class="inbox-title">
                    📬 Inbox
                    <span class="notification-badge" id="unread-badge" style="display: none;">0</span>
                </div>
                <div class="header-actions">
                    <button onclick="markAllAsRead()" class="btn-icon" title="Mark all as read">✓</button>
                    <button onclick="refreshInbox()" class="btn-icon" title="Refresh">↻</button>
                </div>
            </div>

            <div class="inbox-stats">
                <div class="stat-item">
                    <div class="stat-number" id="unread-count">-</div>
                    <div class="stat-label">Unread</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="total-count">-</div>
                    <div class="stat-label">Total</div>
                </div>
            </div>

            <div id="notification-list" class="notification-list">
                <div class="loading">Loading notifications</div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const query = new URLSearchParams(window.location.search);
        let socket = null;
        const token = query.get('token')
        const connectionIndicator = document.getElementById('connectionIndicator');

        function getTokenFromParent() {
            try {
                return window.parent.localStorage.getItem('token');
            } catch (e) {
                return null;
            }
        }

        if (!token) {
            document.getElementById('inbox-content').style.display = 'none';
            document.getElementById('login-check').style.display = 'block';
        } else {
            initializeSocket();
            loadNotifications();
        }

        function initializeSocket() {
            socket = io({
                auth: {
                    token: token
                }
            });

            socket.on('connect', () => {
                console.log('Connected to inbox socket');
                connectionIndicator.className = 'connection-indicator connected';
            });

            socket.on('disconnect', () => {
                console.log('Disconnected from inbox socket');
                connectionIndicator.className = 'connection-indicator disconnected';
            });

            socket.on('new_notification', (notification) => {
                console.log('New notification received:', notification);
                addNotificationToList(notification, true);
                playNotificationSound();
            });

            socket.on('unread_count_updated', (count) => {
                updateUnreadCount(count);
            });

            socket.on('notification_deleted', (notificationId) => {
                const element = document.querySelector(`[data-id="${notificationId}"]`);
                if (element) {
                    element.remove();
                }
                loadNotifications(); 
            });

            socket.on('error', (error) => {
                console.error('Socket error:', error);
            });
        }

        async function loadNotifications() {
            try {
                const response = await fetch('/notifications?limit=10', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        document.getElementById('inbox-content').style.display = 'none';
                        document.getElementById('login-check').style.display = 'block';
                        return;
                    }
                    throw new Error('Failed to load notifications');
                }

                const data = await response.json();
                displayNotifications(data);
                updateStats(data);
            } catch (error) {
                document.getElementById('notification-list').innerHTML = 
                    '<div class="empty-inbox"><div class="icon">⚠️</div><h3>Error loading</h3><p>Please try again later.</p></div>';
            }
        }

        function displayNotifications(data) {
            const container = document.getElementById('notification-list');
            
            if (data.notifications.length === 0) {
                container.innerHTML = `
                    <div class="empty-inbox">
                        <div class="icon">📭</div>
                        <h3>No notifications</h3>
                        <p>You'll receive notifications when someone purchases your services.</p>
                    </div>
                `;
                return;
            }

            const notificationsHtml = data.notifications.map(notification => 
                createNotificationHTML(notification)
            ).join('');

            container.innerHTML = notificationsHtml;
        }

        function createNotificationHTML(notification) {
            const iconMap = {
                'purchase': '🎉',
                'payout_sent': '💰',
                'payout_failed': '⚠️',
                'verification_approved': '✅',
                'verification_rejected': '❌',
                'system': '📢'
            };

            const timeAgo = getTimeAgo(new Date(notification.createdAt));
            
            let additionalInfo = '';
            if (notification.type === 'purchase' && notification.data) {
                if (notification.data.buyerName) {
                    additionalInfo += `
                        <div class="buyer-info">
                            <strong>Buyer:</strong> ${notification.data.buyerName}${notification.data.buyerUsername ? ` (@${notification.data.buyerUsername})` : ''}
                            ${notification.data.amount ? `<br><strong>Earnings:</strong> <span class="amount-highlight">${notification.data.amount} ${notification.data.currency}</span>` : ''}
                        </div>
                    `;
                }
            }
            
            return `
                <div class="notification-item ${!notification.read ? 'unread' : ''}" data-id="${notification._id}">
                    <div class="notification-icon ${notification.type}">
                        ${iconMap[notification.type] || '📢'}
                    </div>
                    <div class="notification-content">
                        <div class="notification-title">${notification.title}</div>
                        <div class="notification-message">${notification.message}</div>
                        ${additionalInfo}
                        <div class="notification-time">${timeAgo}</div>
                    </div>
                    <div class="notification-actions">
                        ${!notification.read ? `<button onclick="markAsRead('${notification._id}')" class="btn-tiny btn-read">✓</button>` : ''}
                        <button onclick="deleteNotification('${notification._id}')" class="btn-tiny btn-delete">×</button>
                    </div>
                </div>
            `;
        }

        function addNotificationToList(notification, isNew = false) {
            const container = document.getElementById('notification-list');
            
            const emptyState = container.querySelector('.empty-inbox');
            if (emptyState) {
                container.innerHTML = '';
            }
            
            const notificationHTML = createNotificationHTML(notification);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = notificationHTML;
            const notificationElement = tempDiv.firstElementChild;
            
            if (isNew) {
                notificationElement.classList.add('new');
            }
            
            container.insertBefore(notificationElement, container.firstChild);
        }

        function updateStats(data) {
            document.getElementById('unread-count').textContent = data.unreadCount;
            document.getElementById('total-count').textContent = data.totalCount;
            updateUnreadCount(data.unreadCount);
        }

        function updateUnreadCount(count) {
            const badge = document.getElementById('unread-badge');
            if (count > 0) {
                badge.textContent = count > 99 ? '99+' : count;
                badge.style.display = 'flex';
            } else {
                badge.style.display = 'none';
            }
        }

        function markAsRead(notificationId) {
            if (socket) {
                socket.emit('mark_notification_read', notificationId);
                
                const element = document.querySelector(`[data-id="${notificationId}"]`);
                if (element) {
                    element.classList.remove('unread');
                    const readButton = element.querySelector('.btn-read');
                    if (readButton) {
                        readButton.remove();
                    }
                }
            }
        }

        async function markAllAsRead() {
            try {
                await fetch('/notifications/read-all', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                loadNotifications();
            } catch (error) {
                console.error('Failed to mark all notifications as read');
            }
        }

        function deleteNotification(notificationId) {
            if (socket) {
                socket.emit('delete_notification', notificationId);
            }
        }

        function refreshInbox() {
            loadNotifications();
        }

        function getTimeAgo(date) {
            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);
            
            if (diffInSeconds < 60) return 'now';
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m`;
            if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h`;
            if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)}d`;
            
            return date.toLocaleDateString();
        }

        function playNotificationSound() {
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.value = 800;
                oscillator.type = 'sine';
                
                gainNode.gain.setValueAtTime(0, audioContext.currentTime);
                gainNode.gain.linearRampToValueAtTime(0.05, audioContext.currentTime + 0.1);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.3);
            } catch (e) {
               
            }
        }

        if (token) {
            setInterval(() => {
                loadNotifications();
            }, 60000);
        }
    </script>
</body>
</html>